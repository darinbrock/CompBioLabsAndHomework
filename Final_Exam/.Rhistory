y <- c(n1init, n2init)
parms <- list(r1, r2, k1, k2, a12, a21)
names(parms) <- ("r1", "r2", "k1", "k2", "a12", "a21")
results <- ode(y = y, times = times, func = System_odes, parms = parms)
r1 <- 0.1
r2 <- r1
k1 <- 1000
k2 <- k1
a12 <- 0.8
a21 <- 0.7
n1init <- 10
n2init <- 85
times <- seq(0, 400, 0.01)
y <- c(n1init, n2init)
parms <- list(r1, r2, k1, k2, a12, a21)
names(parms) <- c("r1", "r2", "k1", "k2", "a12", "a21")
results <- ode(y = y, times = times, func = System_odes, parms = parms)
plot(times, results[,1])
str(results)
results[1,]
plot(results[1,], results[2,])
plot(results[,1], results[,2])
plot(results[,1], results[,3])
lines(results[,1], results[,2])
plot(results[,1], results[,3], 'b')
plot(results[,1], results[,3], col = 'blue')
lines(results[,1], results[,2], col = 'red')
plot(results[,1], results[,3], col = 'blue')
lines(results[,1], results[,2], col = 'red')
plot(results[,1], results[,3], col = 'red')
lines(results[,1], results[,2], col = 'blue')
System_odes <- function(t, y, parms)
{
dydt1 <- parms$r1*y[1]*((parms$k1 - y[1] - parms$a12*y[2])/parms$k1)
dydt2 <- parms$r2*y[2]*((parms$k2 - y[2] - parms$a21*y[1])/parms$k2)
dydt <- c(dydt1, dydt2)
return( list(dydt))
}
r1 <- 0.1
r2 <- r1
k1 <- 1000
k2 <- k1
a12 <- 0.8
a21 <- 0.7
n1init <- 10
n2init <- 85
times <- seq(0, 400, 0.01)
y <- c(n1init, n2init)
parms <- list(r1, r2, k1, k2, a12, a21)
names(parms) <- c("r1", "r2", "k1", "k2", "a12", "a21")
results <- ode(y = y, times = times, func = System_odes, parms = parms)
plot(results[,1], results[,3], col = 'red')
lines(results[,1], results[,2], col = 'blue')
help("read.csv")
data <- read.csv('/home/darin/Documents/CompBioLabsandHw/Lab11/Aboveground_biomass_2ndFORdatabase.csv')
data <- read.csv('/home/darin/Documents/CompBioLabsandHw/Lab11/Aboveground_biomass_2ndFOR database.csv')
raw_data <- read.csv('/home/darin/Documents/CompBioLabsandHw/Lab11/Aboveground_biomass_2ndFOR database.csv')
str(raw_data)
raw_data$Age
raw_data$Chronosequence
str(raw_data)
raw_data$Chronosequence[1,1]
raw_data$Chronosequence[1]
raw_data$Chronosequence[80]
length(raw_data$Chronosequence)
raw_data$Chronosequence[1334]
loc_count <- ref(0, 41)
loc_count <- rep(0, 41)
i <- 1
for(j in 1:length(raw_data$Chronosequence))
{
if(raw_data$Chronosequence[j] == raw_data$Chronosequence[j+1])
{
loc_count[i] <- loc_count[i] + 1
}
else
{
i <- i + 1
}
}
j
for(j in 1:length(raw_data$Chronosequence) - 1)
{
if(raw_data$Chronosequence[j] == raw_data$Chronosequence[j+1])
{
loc_count[i] <- loc_count[i] + 1
}
else
{
i <- i + 1
}
}
for(j in 1:(length(raw_data$Chronosequence)-1))
{
if(raw_data$Chronosequence[j] == raw_data$Chronosequence[j+1])
{
loc_count[i] <- loc_count[i] + 1
}
else
{
i <- i + 1
}
}
j
loc_count
raw_data$Chronosequence[44]
raw_data$Chronosequence[45]
raw_data$Chronosequence[46]
for(j in 1:(length(raw_data$Chronosequence)-1))
{
if(raw_data$Chronosequence[j] == raw_data$Chronosequence[j+1])
{
loc_count[i] <- loc_count[i] + 1
}
else
{
loc_count[i] <- loc_count[i] + 1
i <- i + 1
}
}
loc_count
which.na(loc_count)
which(loc_count)
help("which")
which(is.na(loc_count))
length(loc_count)
loc_count <- rep(0, 41)
loc_count <- rep(0, 41)
for(j in 1:(length(raw_data$Chronosequence)-1))
{
if(raw_data$Chronosequence[j] == raw_data$Chronosequence[j+1])
{
loc_count[i] <- loc_count[i] + 1
}
else
{
loc_count[i] <- loc_count[i] + 1
i <- i + 1
}
}
loc_count
length(loc_count)
loc_count <- rep(0, 41)
i <- 1
length(loc_count)
for(j in 1:(length(raw_data$Chronosequence)-1))
{
if(raw_data$Chronosequence[j] == raw_data$Chronosequence[j+1])
{
loc_count[i] <- loc_count[i] + 1
}
else
{
loc_count[i] <- loc_count[i] + 1
i <- i + 1
}
}
length(loc_count)
loc_count
max(loc_count)
biomass_data <- matrix(data = NA, nrow = max(loc_count), ncol = length(loc_count))
biomass_data <- matrix(data = 0, nrow = max(loc_count), ncol = length(loc_count))
age_data <- matrix(data = NA, nrow = max(loc_count), ncol = length(loc_count))
jumper <- 0
for(k in 1:length(loc_count))
{
for(j in 1:loc_count[k])
{
biomass_data[j,k] <- raw_data$AGB[jumper + j]
age_data[j,k] <- raw_data$Age[jumper + j]
}
# Add to the jumper to get to the next locations data
jumper <- jumper + loc_count[k]
}
View(age_data)
View(age_data)
raw_data$Age[1]
loc_data
loc_count
raw_data$Age[1]
age_data[1,1]
jumper <- 0
age_data[1,1] <- raw_data$Age[jumper + 1]
age_data[1,1]
raw_data$Age[jumper+1]
raw_data$Age[jumper + 1]
age_data[1,1] <- raw_data$Age[jumper + 1]
age_data[1,1]
raw_data$Age[1]
jumper
raw_data$Age[0 + 1]
age_data[1,1] <- raw_data$Age[jumper + 1]
age_data[1,1]
darr <- raw_data$Age[jumper + 1]
darr
darr[2] <- raw_data$Age[jumper + 1]
darr[2]
View(age_data)
View(age_data)
View(biomass_data)
jumper <- 0
for(k in 1:length(loc_count))
{
for(j in 1:loc_count[k])
{
biomass_data[j,k] <- raw_data$AGB[jumper + j]
age_data[j,k] <- raw_data$Age[jumper + j]
}
# Add to the jumper to get to the next locations data
jumper <- jumper + loc_count[k]
}
raw_data$Age[1,1]
raw_data$Age[1]
age_data[1,1]
jumper
length(raw_data$Age) - jumper
View(biomass_data)
View(age_data)
raw_data$Age[9]
raw_data$Age[1]
age_data
age_data[1,2]
age_data <- matrix(data = NA, nrow = max(loc_count), ncol = length(loc_count))
View(age_data)
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
View(age_data)
loc_count[1]
loc_count[2]
loc_count[3]
loc_count
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
View(age_data)
?ls
?rm
ls
?rm
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
test_mat <- matrix(NA, 2, 2)
test_mat
test_mat[1,1] <- raw_data$Age[1]
test_mat
raw_data$Age[1]
str(raw_data$Age[1])
str(raw_data$Age)
str(raw_data)
x <- raw_data$Age[1]
x
test_mat[1,2] <- raw_data$Age[1]
test_mat[1,2]
head(raw_data)
names(raw_data)
Ages <- raw_data$Age
str(Ages)
min(raw_data$Age)
Ages <- as.numeric(raw_data$Age)
str(Ages)
raw_data$Age[1]
raw_data$Age[2]
raw_data$Age[16]
raw_data$Age[14]
Ages[1]
View(biomass_data)
View(age_data)
table(raw_data$Age)
Ages <- as.numeric(raw_data$Age)
Ages
Ages <- as.numeric(as.character(raw_data$Age)
Ages
Ages <- as.numeric(as.character(raw_data$Age))
Ages
which(is.na(raw_data$Age))
which(is.na(Ages))
for(n in 1:length(raw_data$Age))
{
if (raw_data$Age[n] == "OG")
{
raw_data$Age[n] <- NA
}
}
which(is.na(raw_data$Age))
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
rm(test_mat)
View(age_data)
max(age_data)
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
View(age_data)
warnings()
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
warnings()
for(n in 1:length(raw_data$Age))
{
if(raw_data$Age[n] == "OG")
{
raw_data$Age[n] <- NA
}
}
# Set up 2 matrices to hold the data: Each location is a seperate column
biomass_data <- matrix(data = 0, nrow = max(loc_count), ncol = length(loc_count))
age_data <- matrix(data = 0, nrow = max(loc_count), ncol = length(loc_count))
View(raw_data)
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
warnings()
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
View(age_data)
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
View(age_data)
which(is.na(age_data))
View(age_data)
View(biomass_data)
which(is.na(raw_data$Age))
plot(age_data[,1], biomass_data[,1])
View(biomass_data)
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
plot(age_data[,1], biomass_data[,1])
plot(age_data[,1], na.omit(biomass_data[,1]))
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
plot(age_data[,1], biomass_data[,1])
plot(age_data[,1], biomass_data[,1])
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
plot(age_data[,1], biomass_data[,1])
length(loc_count)
length(biomass_data)
ncol(biomass_data)
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
par(mfrow = c(4,2))
for(o in 1:8)
{
plot(age_data[,o], biomass_data[,o], type = "1", col = "black", xlab = "age", ylab = "Above-ground Biomass (Mg/ha)")
}
par(mfrow = c(3,2))
for(o in 1:6)
{
plot(age_data[,o], biomass_data[,o], type = "1", col = "black", xlab = "age", ylab = "Above-ground Biomass (Mg/ha)")
}
for(o in 1:6)
{
plot(age_data[,o], biomass_data[,o], type = "1", col = "black", xlab = "age", ylab = "Above-ground Biomass (Mg/ha)")
}
for(o in 1:6)
{
plot(age_data[,o], biomass_data[,o], col = "black", xlab = "age", ylab = "Above-ground Biomass (Mg/ha)")
}
par(mfrow = c(3,2))
par(mfrow = c(3,2))
for(o in 1:6)
{
plot(age_data[,o], biomass_data[,o], col = "black", xlab = "age", ylab = "Above-ground Biomass (Mg/ha)")
}
loc_count
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
stats
stats$r.squared
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
?round
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
lin_reg
lin_reg[1]
lin_reg[2]
lin_reg$coefficients
str(lin_reg)
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
graphics.off()
raw_data$Chronosequence
View(raw_data)
raw_data$Chronosequence
raw_data$Chronosequence[1]
length(raw_data$Chronosequence)
View(reg_data)
View(reg_data)
lin_reg$coefficients
ncol(biomass_data)
length(loc_count)
lin_reg$coefficients[1]
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
graphics.off()
str(reg_data)
reg_data
source('~/Documents/CompBioLabsandHw/Lab11/project_data_processing.R')
graphics.off()
x <- 5
vec <- rep(23, 5)
vec
vec[4] <- 27.2
vec
# Question 13
final_exam_quest13 <- function(input1, input2)
{
sum <- input1 + input2
if(sum < 0)
{
return(0)
}
else
{
return(sum)
}
}
final_exam_quest13(-5, 2)
final_exam_quest13(-5, 22)
read.csv("data.csv")
getwd()
setwd("/home/darin/Documents/CompBioLabsandHw/Final_Exam/")
read.csv("data.csv")
data <- read.csv("data.csv")
data[,2] < 0
sum(data[,2] < 0)
View(data)
which(data[,2] < 0)
row_indices <- which(data[,2] < 0)
new_data <- data[row_indices,]
View(new_data)
source('~/Documents/CompBioLabsandHw/Final_Exam/final_exam_pt2.R')
Lokta_volterra <- function(totalGenerations = 1000, initPrey = 100, initPred = 10, a = 0.01, r = 0.2, m = 0.05, k = 0.1)
{
# Setup the time, n, p vectors
t <- 1:totalGenerations
n <- rep(initPrey, totalGenerations)
p <- rep(initPred, totalGenerations)
# Do the for loop
for(i in 2:totalGenerations)
{
n[i] <- n[i - 1] + (r*n[i - 1]) - (a*n[i-1] * p[i-1])
p[i] <- p[i - 1] + (k*a*n[i - 1]*p[i - 1]) - (m*p[i - 1])
}
# Make the figure
plot(t, n, col = "blue")
lines(t, p, col = "red")
# Return the data
results <- list("time" = t, "Prey" = n, "Predator" = p)
}
results <- Lokta_volterra()
results$n
results$Prey
t <- 1:totalGenerations
t <- 1:1000
t
n <- rep(100, 1000)
p <- rep(10, 1000)
results <- Lokta_volterra()
results$Prey
oo <- integer(results$Prey)
results$Prey
results$Prey[1:60]
results$Prey[1:100]
Lokta_volterra <- function(totalGenerations = 1000, initPrey = 100, initPred = 10, a = 0.01, r = 0.2, m = 0.05, k = 0.1)
{
# Setup the time, n, p vectors
t <- 1:totalGenerations
n <- rep(initPrey, totalGenerations)
p <- rep(initPred, totalGenerations)
# Do the for loop
for(i in 2:totalGenerations)
{
if(n[i-1] < 0 )
{
n[i] <- 0
}
else
{
n[i] <- n[i - 1] + (r*n[i - 1]) - (a*n[i-1] * p[i-1])
}
if(p[i-1] < 0)
{
p[i] <- 0
}
else
{
p[i] <- p[i - 1] + (k*a*n[i - 1]*p[i - 1]) - (m*p[i - 1])
}
}
# Make the figure
plot(t, n, col = "blue")
lines(t, p, col = "red")
# Return the data
results <- list("time" = t, "Prey" = n, "Predator" = p)
}
results <- Lokta_volterra()
Lokta_volterra <- function(totalGenerations = 1000, initPrey = 100, initPred = 10, a = 0.01, r = 0.2, m = 0.05, k = 0.1)
{
# Setup the time, n, p vectors
t <- 1:totalGenerations
n <- rep(initPrey, totalGenerations)
p <- rep(initPred, totalGenerations)
# Do the for loop
for(i in 2:totalGenerations)
{
n[i] <- n[i - 1] + (r*n[i - 1]) - (a*n[i-1] * p[i-1])
p[i] <- p[i - 1] + (k*a*n[i - 1]*p[i - 1]) - (m*p[i - 1])
if(n[i] < 0 )
{
n[i] <- 0
}
if(p[i] < 0)
{
p[i] <- 0
}
}
# Make the figure
plot(t, n, col = "blue")
lines(t, p, col = "red")
# Return the data
results <- list("time" = t, "Prey" = n, "Predator" = p)
}
results <- Lokta_volterra()
