chips <- 5
guests <- 8;
self <- c(7, 6, 5, 1, 2, 3, 4);
Penny <- c(5, 7, 6, 3, 1, 2, 4);
Jenny <- c(4, 3, 2, 7, 6, 5, 1);
Lenny <- c(1, 7, 3, 4, 6, 5, 2);
Stewie <- c(6, 7, , 4, 3, 1, 2);
self <- c(7, 6, 5, 1, 2, 3, 4);
Penny <- c(5, 7, 6, 3, 1, 2, 4);
Jenny <- c(4, 3, 2, 7, 6, 5, 1);
Lenny <- c(1, 7, 3, 4, 6, 5, 2);
Stewie <- c(6, 7, 5, 4, 3, 1, 2);
Rankings <- cbind(self, Penny, Jenny, Lenny, Stewie);
Rankings
str(Rankings)
str(PennyIV)
PennyIV = Penny[4]
str(PennyIV)
str(Penny)
Rankings_DF = as.data.frame(Rankings)
dim(Rankings)
dim(Rankings_DF)
str(Rankings)
str(Rankings_DF)
typeof(Rankings)
typeof(Rankings_DF)
Rankings == Rankings_DF
help("row.names")
row.names(Rankings) <-
EpisodeNames <- c("I", "II", "III", "IV", "V", "VI", "VII");
row.names(Rankings) <- EpisodeNames
Rankings
Rankings[4:6,]
Rankings[c(2,5,7),]
Rankings[c(4,6), c(2,3,5)] # Penny, Jenny, and Stewie's rankings for episodes 4,6
Rankings["III", "Penny"]
str(Rankings_DF)
Rankings_DF$Lenny
fibonacci <- function(n = 3, k = 1){
vect <- rep(k, n)
vect[2] <- 1
for(i in 3:n){
vect[i] <- vect[i - 2] + vect[i -1]
}
return(vect)
}
fibonacci
fibonacci()
growth_model <- function(n_init = 100, gen = 100, r = 0.3, K = 20000){
# Prealllocate abundance vector
abundance <- rep(n_init, gen)
for(i in 2:gen){
abundance[i] <- abundance[i-1] + (r*n[i - 1]*(K - n[i - 1])/K)
}
plot(generations, abundance)
return(abundance)
}
}
growth_model <- function(n_init = 100, gen = 100, r = 0.3, K = 20000){
# Prealllocate abundance vector
abundance <- rep(n_init, gen)
for(i in 2:gen){
abundance[i] <- abundance[i-1] + (r*n[i - 1]*(K - n[i - 1])/K)
}
plot(generations, abundance)
return(abundance)
}
growth_model()
growth_model <- function(n_init = 100, gen = 100, r = 0.3, K = 20000){
# Prealllocate abundance vector
abundance <- rep(n_init, gen)
for(i in 2:gen){
abundance[i] <- abundance[i-1] + (r*abundance[i - 1]*(K - abundance[i - 1])/K)
}
plot(generations, abundance)
return(abundance)
}
growth_model()
growth_model <- function(n_init = 100, gen = 100, r = 0.3, K = 20000){
# Prealllocate abundance vector
abundance <- rep(n_init, gen)
for(i in 2:gen){
abundance[i] <- abundance[i-1] + (r*abundance[i - 1]*(K - abundance[i - 1])/K)
}
plot(gen, abundance)
return(abundance)
}
grouping()
growth_model()
growth_model <- function(n_init = 100, gen = 100, r = 0.3, K = 20000){
# Prealllocate abundance vector
abundance <- rep(n_init, gen)
# Run the model and plot
for(i in 2:gen){
abundance[i] <- abundance[i-1] + (r*abundance[i - 1]*(K - abundance[i - 1])/K)
}
plot(1:gen, abundance)
return(abundance)
}
growth_model()
x <- [1, 1, 0, 0; 0, 1, 1, 0; 0, 0, 0, 0; 1, 0, 0, 1]
clear
clc
pairtable <- matrix(0, numb, 3)
pairtable <- matrix(0, 20, 3)
View(pairtable)
View(pairtable)
data <- read.csv(/compBioSandbox/CompBio_on_Git/Labs/Lab07/SmallAdjacencyMatrix.csv)
data <- read.csv(compBioSandbox/CompBio_on_Git/Labs/Lab07/SmallAdjacencyMatrix.csv)
data <- read.csv(home/compBioSandbox/CompBio_on_Git/Labs/Lab07/SmallAdjacencyMatrix.csv)
data <- read.csv(/home/compBioSandbox/CompBio_on_Git/Labs/Lab07/SmallAdjacencyMatrix.csv)
data <- read.csv(~home/compBioSandbox/CompBio_on_Git/Labs/Lab07/SmallAdjacencyMatrix.csv)
data <- read.csv('~home/compBioSandbox/CompBio_on_Git/Labs/Lab07/SmallAdjacencyMatrix.csv')
data <- read.csv('/home/compBioSandbox/CompBio_on_Git/Labs/Lab07/SmallAdjacencyMatrix.csv')
data <- read.csv('/home/darin/compBioSandbox/CompBio_on_git/Labs/Lab07/SmallAdjacencyMatrix.csv')
adjmatrix_to_pairwise <- function(table){
# get necessary variables
n <- nrows(table)
counter <- 1
numb <- nnzero(table)
pairtable <- matrix(0, numb, 3)
for(i in 1:n){
for(j in 1:n){
if(table[i,j] > 0){
pairtable[counter, 1] <- i
pairtable[counter, 2] <- j
pairtable[counter, 3] <- data[i,j]
counter <- counter + 1
}
}
}
return(pairtable)
}
adjmatrix_to_pairwise(data)
adjmatrix_to_pairwise <- function(table){
# get necessary variables
n <- nrow(table)
counter <- 1
numb <- nnzero(table)
pairtable <- matrix(0, numb, 3)
for(i in 1:n){
for(j in 1:n){
if(table[i,j] > 0){
pairtable[counter, 1] <- i
pairtable[counter, 2] <- j
pairtable[counter, 3] <- data[i,j]
counter <- counter + 1
}
}
}
return(pairtable)
}
adjmatrix_to_pairwise(data)
str(data)
adjmatrix_to_pairwise <- function(table){
# get necessary variables
n <- nrow(table)
counter <- 1
numb <- sum(table != 0)
pairtable <- matrix(0, numb, 3)
for(i in 1:n){
for(j in 1:n){
if(table[i,j] > 0){
pairtable[counter, 1] <- i
pairtable[counter, 2] <- j
pairtable[counter, 3] <- data[i,j]
counter <- counter + 1
}
}
}
return(pairtable)
}
adjmatrix_to_pairwise(data)
pair <- adjmatrix_to_pairwise(data)
View(pair)
View(pair)
max(pair)
max(pair[,1])
max(pair[,2])
max(pair[,3])
adjmatrix_to_pairwise <- function(table){
# get necessary variables
n <- nrow(table)
counter <- 1
numb <- sum(table != 0)
pairtable <- matrix(0, numb, 3)
# Loop over rows and columns and pull out the data wanted
for(i in 1:n){
for(j in 1:n){
if(table[i,j] > 0){
pairtable[counter, 1] <- i
pairtable[counter, 2] <- j
pairtable[counter, 3] <- data[i,j]
counter <- counter + 1
}
}
}
return(pairtable)
}
read.csv("/home/darin/compBioSandbox/CompBio_on_git/Labs/Lab07/SmallAdjacencyMatrix.csv")
data <- read.csv("/home/darin/compBioSandbox/CompBio_on_git/Labs/Lab07/SmallAdjacencyMatrix.csv")
pair <- adjmatrix_to_pairwise(data)
View(pair)
View(pair)
pairwise_to_adjmatrix <- function(pairwise){
# Get table size and initialize
nrows <- max(pairwise[,1])
ncols <- max(pairwise[,2])
adjmat <- matrix(0, nrows, ncols)
# loop through every row in pairwise
for(i in 1:nrow(pairwise)){
# make it easier to tell whats going on
rowval <- pairwise[i,1]
colval <- pairwise[i,2]
# put in data to adjmat
adjmat[rowval, colval] <- pairwise[i, 3]
}
return(adjmat)
}
data2 <- pairwise_to_adjmatrix(pair)
View(data)
View(data)
View(data2)
View(data2)
View(data)
View(data)
fibonacci <- function(n = 3, k = 1){
# Preallocate vect and set the first 2 terms
vect <- rep(k, n)
vect[2] <- 1
# if statement for the rest of the terms
for(i in 3:n){
vect[i] <- vect[i - 2] + vect[i -1]
}
return(vect)
}
fibonacci(2,1)
fibonacci <- function(n = 3, k = 1){
# Preallocate vect and set the first 2 terms
vect <- rep(k, n)
if(n < 2){
return(vect)
}
# for statement for the rest of the terms
else if (n < 3){
vect[2] <- 1
return(vect)
}
else{
for(i in 3:n){
vect[i] <- vect[i - 2] + vect[i -1]
}
return(vect)
}
}
fibonacci(2,1)
View(data)
View(data)
eps
help('stop')
source('~/Documents/ComputationalBioLabsandHW/Lab07/brock_lab07.R')
fibonacci(1.5, 1)
fibonacci(-1,2)
source('~/Documents/ComputationalBioLabsandHW/Lab07/brock_lab07.R')
fibonacci(-1,2)
fibonacci(1.5, 1)
# From Lab 7
growth_model <- function(n_init = 100, gen = 100, r = 0.2, K = 20000){
# Prealllocate abundance vector
abundance <- rep(n_init, gen)
# Run the model and plot
for(i in 2:gen){
abundance[i] <- abundance[i-1] + (r*abundance[i - 1]*(K - abundance[i - 1])/K)
}
plot(1:gen, abundance)
return(abundance)
}
growth_model()
help write.csv()
help("write.csv")
gen <- 1:100
abundance <- growth_model()
data <- cbind(gen, abundance)
View(data)
View(data)
# Implement the function
# Put in initial conditions
generations <- 1:100
n_init <- 200
r <- .15
K <- 15000
abundance <- growth_model(n_init, length(generations), r, K)
# write data to an r file
data <- cbind(generations, abundance)
write.csv(data, file = "growth_model_data.csv")
getwd()
generations <- 1:100
n_init <- 200
r <- .15
K <- 15000
abundance <- growth_model(n_init, length(generations), r, K)
# write data to an r file
data <- cbind(generations, abundance)
setwd("/home/darin/Documents/ComputationalBioLabsandHW/Lab08/")
write.csv(data, file = "growth_model_data.csv")
# Problem #2 time-growth model
# From Lab 7
growth_model <- function(n_init = 100, gen = 100, r = 0.2, K = 20000){
# Prealllocate abundance vector
abundance <- rep(n_init, gen)
# Run the model and plot
for(i in 2:gen){
abundance[i] <- abundance[i-1] + (r*abundance[i - 1]*(K - abundance[i - 1])/K)
}
plot(1:gen, abundance, xlab = "generations")
return(abundance)
}
# Implement the function
# Put in initial conditions
generations <- 1:100
n_init <- 200
r <- .15
K <- 15000
abundance <- growth_model(n_init, length(generations), r, K)
# write data to an r file
data <- cbind(generations, abundance)
setwd("/home/darin/Documents/ComputationalBioLabsandHW/Lab08/")
write.csv(data, file = "growth_model_data.csv")
